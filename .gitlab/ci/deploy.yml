prepare_release:
  stage: release
  needs:
    - compile
  image: debian:bookworm
  script:
    - set -e  # Fail on any error

    - OUTPUT_DIR="release_content"
    - mkdir -p "$OUTPUT_DIR"
    - cp templates/index.html "$OUTPUT_DIR/index.html"

    # Install jq
    - apt-get update && apt-get install -y jq

    # Replace placeholders
    - sed -i "s|{{ repo_name }}|${CI_PROJECT_NAME}|g" "$OUTPUT_DIR/index.html"
    - sed -i "s|{{ tag }}|${CI_COMMIT_TAG}|g" "$OUTPUT_DIR/index.html"
    - sed -i "s|{{ github_repo }}|${CI_PROJECT_PATH}|g" "$OUTPUT_DIR/index.html"

    # Initialize empty JSON array
    - assets_json=$(jq -n '[]')
    - rm -f "$OUTPUT_DIR/pdf_links.txt"

    # Process PDFs once: generate HTML and build release JSON
    - |
      shopt -s nullglob
      for file in paper/*.pdf; do
        base=$(basename "$file" .pdf)
        newname="${base}-${CI_COMMIT_TAG}.pdf"
        cp "$file" "$OUTPUT_DIR/$newname"

        # --- HTML card ---
        printf "        <div class='card glass p-4 rounded-lg shadow-md hover:shadow-lg'>\n" >> "$OUTPUT_DIR/pdf_links.txt"
        printf "          <a href='%s/%s' class='block'>\n" "$CI_PAGES_URL" "$newname" >> "$OUTPUT_DIR/pdf_links.txt"
        printf "            <div class='flex items-center'>\n" >> "$OUTPUT_DIR/pdf_links.txt"
        printf "              <svg xmlns='http://www.w3.org/2000/svg' class='h-6 w-6 text-accent-500 mr-3' fill='none' viewBox='0 0 24 24' stroke='currentColor'>\n" >> "$OUTPUT_DIR/pdf_links.txt"
        printf "                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z' />\n" >> "$OUTPUT_DIR/pdf_links.txt"
        printf "              </svg>\n" >> "$OUTPUT_DIR/pdf_links.txt"
        printf "              <span class='text-gray-200 hover:text-white transition-colors'>%s</span>\n" "$newname" >> "$OUTPUT_DIR/pdf_links.txt"
        printf "            </div>\n" >> "$OUTPUT_DIR/pdf_links.txt"
        printf "            <div class='mt-2 text-xs text-gray-400 code-font'>Updated: %s</div>\n" "$(date +%Y-%m-%d)" >> "$OUTPUT_DIR/pdf_links.txt"
        printf "          </a>\n" >> "$OUTPUT_DIR/pdf_links.txt"
        printf "        </div>\n" >> "$OUTPUT_DIR/pdf_links.txt"

        # --- Build JSON asset ---
        url="$CI_PAGES_URL/$newname"
        assets_json=$(echo "$assets_json" | jq --arg name "$newname" --arg url "$url" '. += [{"name": $name, "url": $url, "type": "other"}]')
      done
      shopt -u nullglob

    # Save JSON to file
    - echo "$assets_json" > "release_assets.json"
    - echo "Generated release assets JSON:"
    - cat "release_assets.json"

    # Convert JSON â†’ release-cli args (improved approach)
    - jq -r '.[] | "--assets-link \(tojson)"' "release_assets.json" > assets_args.txt
    - echo "Generated assets arguments:"
    - cat assets_args.txt

    # Insert PDF links into index.html
    - sed -i -e '/{{ PDF_LINKS }}/r '"$OUTPUT_DIR/pdf_links.txt" -e 's/{{ PDF_LINKS }}//' "$OUTPUT_DIR/index.html"

    # Cleanup temporary files (optional)
    - rm -f "$OUTPUT_DIR/pdf_links.txt"

  artifacts:
    paths:
      - release_content/
      - assets_args.txt
    expire_in: 1 hour  # Set appropriate expiration

  rules:
    - if: $CI_COMMIT_TAG


# GitLab Pages deployment (serves release_content)
pages:
  stage: release
  needs:
    - prepare_release
  script:
    - mkdir -p public
    - cp -r release_content/* public/
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_TAG

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - prepare_release
    - pages
  script:
    - echo "Creating release for tag $CI_COMMIT_TAG"
    - ASSETS_ARGS=$(cat assets_args.txt)
    - release-cli create --name "Release $CI_COMMIT_TAG" --tag-name "$CI_COMMIT_TAG" --description "Automated release for $CI_COMMIT_TAG" $ASSETS_ARGS
  rules:
    - if: $CI_COMMIT_TAG
